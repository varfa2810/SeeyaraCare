@using GarageDomain.Entities
@using GarageDomain.Entities.Authentication

@model LoginRequest

@{
	ViewBag.Title = "Login";
}

<div class="container h-100">
	<div class="row justify-content-center">
		<div class="col-12 col-sm-8 col-md-7 col-lg-6 col-xl-6">


			<div class="card border-light mb-3 mt-5 shadow-lg p-4">
				<div class="card-body">
					<h2 class="text-center display-4">Login</h2>

					@if (!string.IsNullOrEmpty(TempData["Error"] as string))
					{
						<div class="alert alert-danger d-flex align-items-center" role="alert">
							<i class="bi bi-exclamation-triangle-fill me-2"></i>
							<div>@TempData["Error"]</div>
						</div>
					}

					<form method="post" asp-action="Login" asp-controller="Authentication" novalidate class="needs-validation">

						<div class="form-group form-floating mb-3">
							<input type="email" asp-for="Email" class="form-control" id="Email" placeholder="name@example.com" required autocomplete="email" />
							<label asp-for="Email">Email</label>
							<div class="invalid-feedback">
								Email is required.
							</div>

						</div>

						<div class="form-group form-floating mb-3 position-relative">
							<input type="password" asp-for="Password" class="form-control" id="Password" placeholder="Password" required autocomplete="off" />
							<i class="bi bi-eye position-absolute top-50 end-0 translate-middle-y me-3" style="cursor:pointer;" onclick="togglePasswordVisibility(this)"></i>
							<label asp-for="Password">Password</label>
							<div class="invalid-feedback">
								Password is required.
							</div>
						</div>


						<button type="submit" class="btn btn-success mt-3 w-100">Login</button>
					</form>

					@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
					{
						<p class="text-danger text-center mt-2">@ViewBag.ErrorMessage</p>
					}
				</div>
			</div>

		</div>
	</div>
</div>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />



	<script>
		function togglePasswordVisibility(icon) {
			const input = icon.previousElementSibling;
			const isPassword = input.type === "password";
			input.type = isPassword ? "text" : "password";
			icon.classList.toggle("bi-eye");
			icon.classList.toggle("bi-eye-slash");
		}
	</script>


	<script>
				(() => {
		  'use strict'

		  // Fetch all the forms we want to apply custom Bootstrap validation styles to
		  const forms = document.querySelectorAll('.needs-validation')

		  // Loop over them and prevent submission
		  Array.from(forms).forEach(form => {
			form.addEventListener('submit', event => {
			  if (!form.checkValidity()) {
				event.preventDefault()
				event.stopPropagation()
			  }

			  form.classList.add('was-validated')
			}, false)
		  })
		})()
	</script>


}